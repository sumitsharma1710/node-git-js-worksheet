A Git submodule refers to a Git repository that exists within another Git repository.
You can think of it as a child repository or a subset of a main repository.
Git submodules provide a structured way of including external repositories in a project while retaining the benefits of having a repository maintained separately.

Steps to Add a Git Submodule:

--> git submodule add <submodule_url>
Or 
To specify a directory where you want the submodule to be located within your main repository, add the path argument to the command.

--> git submodule add <submodule_url> <path>



Use Cases for Git Submodules
1.  Managing External Libraries
When you use a library or dependency that is maintained separately, you can include it as a submodule. This is common in projects that use third-party libraries or tools.
Example:
Game Development: Integrate a physics engine or graphics library as a submodule.
Web Development: Include a UI component library that is managed separately.

2 Shared Code Across Projects
If you have code that is shared among multiple projects, you can use a submodule to include that code in each project.
Example:
Internal Tools: A set of shared utility functions or configurations that are used across various internal projects.

3 Large Projects with Multiple Components
In large projects where different components are developed separately, using submodules helps manage and organize these components.
Example:
Microservices: Include shared service libraries or common configurations as submodules in different microservices repositories.